name: Django CI with SonarQube

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set environment variables from secrets
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV
          echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test
          coverage xml

      - name: Check SONAR_TOKEN availability
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "ERROR: SONAR_TOKEN is NOT set"
            exit 1
          else
            echo "SONAR_TOKEN is set"
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=caderneta-virtual-backend
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml
